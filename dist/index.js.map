{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar promotionRules = require( '@stdlib/ndarray-promotion-rules' );\nvar safeCasts = require( '@stdlib/ndarray-safe-casts' );\nvar resolveEnum = require( '@stdlib/strided-base-dtype-resolve-enum' );\nvar resolveStr = require( '@stdlib/strided-base-dtype-resolve-str' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns the intersection of two sorted lists.\n*\n* @private\n* @param {ArrayLikeObject} list1 - first sorted list\n* @param {ArrayLikeObject} list2 - second sorted list\n* @returns {ArrayLikeObject} result\n*\n* @example\n* var list1 = [ 'a', 'b', 'c', 'd' ];\n* var list2 = [ 'b', 'd', 'e' ];\n*\n* var out = intersection( list1, list2 );\n* // returns [ 'b', 'd' ]\n*/\nfunction intersection( list1, list2 ) {\n\tvar out;\n\tvar M;\n\tvar N;\n\tvar v;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tM = list1.length;\n\tN = list2.length;\n\n\tout = [];\n\tk = 0;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tif ( k >= N ) {\n\t\t\tbreak;\n\t\t}\n\t\tv = list1[ i ];\n\t\tfor ( j = k; j < N; j++ ) {\n\t\t\tif ( v === list2[ j ] ) {\n\t\t\t\tk = j + 1;\n\t\t\t\tout.push( v );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n* Resolves a list of data types to data type strings.\n*\n* @private\n* @param {ArrayLikeObject} dtypes - list of data types\n* @returns {(StringArray|Error)} data type strings (or an error)\n*\n* @example\n* var out = resolve( [ 1, 2, 3 ] );\n* // returns [...]\n*/\nfunction resolve( dtypes ) {\n\tvar out;\n\tvar dt;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < dtypes.length; i++ ) {\n\t\tdt = resolveStr( dtypes[ i ] );\n\t\tif ( dt === null ) {\n\t\t\treturn new TypeError( format( 'invalid argument. Must provide recognized data types. Unable to resolve a data type string. Value: `%s`.', dtypes[ i ] ) );\n\t\t}\n\t\tout.push( dt );\n\t}\n\treturn out;\n}\n\n/**\n* Tests whether a provided array contains a specified value.\n*\n* @private\n* @param {Array} arr - input array\n* @param {*} value - search value\n* @returns {boolean} boolean indicating whether a provided array contains a specified value\n*/\nfunction contains( arr, value ) {\n\tvar i;\n\tfor ( i = 0; i < arr.length; i++ ) {\n\t\tif ( arr[ i ] === value ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// MAIN //\n\n/**\n* Generates a list of binary interface signatures from strided array data types.\n*\n* ## Notes\n*\n* -   The function returns a strided array having a stride length of `3` (i.e., every `3` elements define a binary interface signature).\n* -   For each signature (i.e., set of three consecutive non-overlapping strided array elements), the first two elements are the input data types and the third element is the return data type.\n* -   All signatures follow type promotion rules.\n*\n* @param {Array} dtypes1 - list of supported data types for the first argument\n* @param {Array} dtypes2 - list of supported data types for the second argument\n* @param {Array} dtypes3 - list of supported data types for the output\n* @param {Options} [options] - options\n* @param {boolean} [options.enums=false] - boolean flag indicating whether to return signatures as a list of enumeration constants\n* @throws {TypeError} must provide recognized data types\n* @returns {Array} strided array containing binary interface signatures\n*\n* @example\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [ 'float32', 'float32', 'float32', ... ]\n*/\nfunction signatures( dtypes1, dtypes2, dtypes3, options ) {\n\tvar cache;\n\tvar casts;\n\tvar opts;\n\tvar tmp;\n\tvar out;\n\tvar dt1;\n\tvar dt2;\n\tvar dt3;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar t4;\n\tvar M;\n\tvar N;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( arguments.length > 3 ) {\n\t\topts = options;\n\t} else {\n\t\topts = {};\n\t}\n\t// Resolve the list of provided data types to data type strings:\n\tdt1 = resolve( dtypes1 );\n\tif ( dt1 instanceof Error ) {\n\t\tthrow dt1;\n\t}\n\tif ( dtypes2 === dtypes1 ) { // don't do work if we don't need to\n\t\tdt2 = dt1;\n\t} else {\n\t\tdt2 = resolve( dtypes2 );\n\t\tif ( dt2 instanceof Error ) {\n\t\t\tthrow dt2;\n\t\t}\n\t}\n\tif ( dtypes3 === dtypes1 ) { // don't do work if we don't need to\n\t\tdt3 = dt1;\n\t} else if ( dtypes3 === dtypes2 ) {\n\t\tdt3 = dt2;\n\t} else {\n\t\tdt3 = resolve( dtypes3 );\n\t\tif ( dt3 instanceof Error ) {\n\t\t\tthrow dt3;\n\t\t}\n\t}\n\t// Sort the list of return dtypes:\n\tdt3.sort();\n\n\t// Initialize a cache for storing the safe casts for promoted dtypes:\n\tcache = {};\n\n\t// Generate the list of signatures...\n\tM = dt1.length;\n\tN = dt2.length;\n\tout = [];\n\tfor ( i = 0; i < M; i++ ) {\n\t\tt1 = dt1[ i ];\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tt2 = dt2[ j ];\n\n\t\t\t// Resolve the promoted dtype for the current dtype pair:\n\t\t\tt3 = promotionRules( t1, t2 );\n\n\t\t\t// Check whether the dtype pair promotes...\n\t\t\tif ( t3 === -1 || t3 === null ) {\n\t\t\t\t// The dtype pair does not promote:\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Check whether the promoted dtype is in our list of output dtypes...\n\t\t\tif ( contains( dt3, t3 ) ) {\n\t\t\t\tout.push( t1, t2, t3 );\n\t\t\t}\n\t\t\t// Retrieve the allowed casts for the promoted dtype:\n\t\t\tcasts = cache[ t3 ];\n\n\t\t\t// If a list of allowed casts is not in the cache, we need to resolve them...\n\t\t\tif ( casts === void 0 ) {\n\t\t\t\t// Resolve the list of safe casts for the promoted dtype:\n\t\t\t\tcasts = safeCasts( t3 );\n\n\t\t\t\t// Remove safe casts which are not among the supported output dtypes:\n\t\t\t\tcasts = intersection( dt3, casts.sort() );\n\n\t\t\t\t// Store the list of safe casts in the cache:\n\t\t\t\tcache[ t3 ] = casts;\n\t\t\t}\n\t\t\t// Generate signatures for allowed casts...\n\t\t\tfor ( k = 0; k < casts.length; k++ ) {\n\t\t\t\tt4 = casts[ k ];\n\t\t\t\tif ( t4 !== t3 ) {\n\t\t\t\t\tout.push( t1, t2, t4 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( opts.enums ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < out.length; i++ ) {\n\t\t\ttmp.push( resolveEnum( out[ i ] ) );\n\t\t}\n\t\tout = tmp;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = signatures;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Generate a list of binary interface signatures from strided array data types.\n*\n* @module @stdlib/strided-base-binary-dtype-signatures\n*\n* @example\n* var signatures = require( '@stdlib/strided-base-binary-dtype-signatures' );\n*\n* var dtypes = [\n*     'float64',\n*     'float32',\n*     'int32',\n*     'uint8'\n* ];\n*\n* var sigs = signatures( dtypes, dtypes, dtypes );\n* // returns [ 'float64', 'float64', 'float64', ... ]\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "promotionRules", "safeCasts", "resolveEnum", "resolveStr", "format", "intersection", "list1", "list2", "out", "M", "N", "v", "i", "j", "k", "resolve", "dtypes", "dt", "contains", "arr", "value", "signatures", "dtypes1", "dtypes2", "dtypes3", "options", "cache", "casts", "opts", "tmp", "dt1", "dt2", "dt3", "t1", "t2", "t3", "t4", "main"]
}
